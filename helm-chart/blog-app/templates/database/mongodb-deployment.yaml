{{- if .Values.mongodb.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.mongodb.name }}
  namespace: {{ .Values.namespaces.database }}
  labels:
    app.kubernetes.io/name: blog-app
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: mongodb
  annotations:
    project.maintainer: "{{ .Values.global.maintainer }}"
spec:
  replicas: {{ .Values.mongodb.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: blog-app
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: blog-app
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: mongodb
    spec:
      containers:
        - name: mongodb
          image: "{{ .Values.mongodb.image.repository }}:{{ .Values.mongodb.image.tag }}"
          imagePullPolicy: {{ .Values.mongodb.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.mongodb.service.targetPort }}
              name: mongodb
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.security.secrets.mongodb.name }}
                  key: MONGO_INITDB_ROOT_USERNAME
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.security.secrets.mongodb.name }}
                  key: MONGO_INITDB_ROOT_PASSWORD
            - name: MONGO_INITDB_DATABASE
              value: {{ .Values.mongodb.auth.database }}
          {{- if .Values.mongodb.persistence.enabled }}
          volumeMounts:
            - name: mongodb-storage
              mountPath: {{ .Values.mongodb.persistence.mountPath }}
          {{- end }}
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 5
      {{- if .Values.mongodb.persistence.enabled }}
      volumes:
        - name: mongodb-storage
          {{- if eq .Values.mongodb.persistence.type "emptyDir" }}
          emptyDir: {}
          {{- end }}
      {{- end }}
{{- end -}}
